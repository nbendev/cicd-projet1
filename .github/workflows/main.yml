name: CI/CD workflow

env:
  SERVER_IP: "51.68.225.135"
  SERVER_USER: root

on:
  push:
    branches: [ main ]

jobs:
  check-tests-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: installer node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: ./server/package-lock.json

      - name: install dependencies
        run: npm ci --prefer-offline

      - name: vérifie le code
        run: npm run lint

      - name: audit & fix vulnérabilités
        run: |
          npm audit fix || true
          npm audit --audit-level=critical

      - name: execute tests
        run: npm run test:ci
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
            token: ${{ secrets.CODECOV_TOKEN }}


  check-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: installer node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json

      - name: install dependencies
        run: npm ci --prefer-offline

      - name: vérifie le code
        run: npm run lint

      - name: audit & fix vulnérabilités
        run: |
          npm audit fix || true
          npm audit --audit-level=critical



  build-frontend:
    needs: check-frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: installer node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: ./client/package-lock.json

      - name: install dependencies
        run: npm ci --prefer-offline

      - name: Build application frontend
        run: npm run build
      - name: upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./client/dist


  test-e2e-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: installer node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: install dependencies
        run: |
          cd server
          npm ci --prefer-offline
      - name: download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./client/dist
      - name: lancer le serveur backend
        run: |
          cd server
          npm start &
      - name: exec cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: ./client
          browser: chrome
          start: npm run preview
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173

  deploy:
    needs: [check-tests-backend, test-e2e-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./dist

      - name: charger la clé SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY_VPS }}

      - name: autoriser l’hôte
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$SERVER_IP" >> ~/.ssh/known_hosts

      - name: préparer le répertoire distant
        run: |
          ssh -o StrictHostKeyChecking=accept-new "$SERVER_USER@$SERVER_IP" \
            "mkdir -p /var/www/server"

      - name: déployer les fichiers
        run: |
          rsync -az --delete ./server/ "$SERVER_USER@$SERVER_IP:/var/www/server/"
          ssh "$SERVER_USER@$SERVER_IP" "ls -al /var/www && ls -al /var/www/server"

      - name: déployer les fichiers frontend
        run: |
          scp -r ./dist "$SERVER_USER@$SERVER_IP:/var/www"

      - name: installer deps prod
        run: |
          ssh "$SERVER_USER@$SERVER_IP" \
            "cd /var/www/server && npm ci --omit=dev"

      - name: redémarrer pm2
        run: |
          ssh "$SERVER_USER@$SERVER_IP" \
            "cd /var/www/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
